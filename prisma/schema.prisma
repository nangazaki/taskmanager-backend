// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  firstName  String
  lastName   String?
  username   String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  emailVerifiedAt DateTime?

  isSuperAdmin Boolean @default(false)

  tasks   Task[]
  Comment Comment[]

  teams          Team[]           @relation("TeamMembership")
  TeamMembership TeamMembership[]

  @@map("users")
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  due_date    DateTime?
  completed   Boolean   @default(false)

  is_deleted             Boolean   @default(false)
  deleted_at             DateTime?
  deleted_permanently    Boolean   @default(false)
  deleted_permanently_at DateTime?
  retention_period       DateTime?

  User       User      @relation(fields: [userId], references: [id])
  priority   Priority  @relation(fields: [priorityId], references: [id])
  userId     String
  priorityId String
  comments   Comment[]

  @@map("tasks")
}

model Priority {
  id    String @id @default(uuid())
  name  String @unique
  tasks Task[]

  @@map("priority")
}

model Comment {
  id         String   @id @default(uuid())
  text       String
  created_at DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@map("comments")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  onwer_id    String
  privacity   String
  status      String

  members        User[]           @relation("TeamMembership")
  TeamMembership TeamMembership[]

  @@map("teams")
}

model TeamMembership {
  id      String @id @default(uuid())
  team_id String
  user_id String
  role    String

  team Team @relation(fields: [team_id], references: [id])
  user User @relation(fields: [user_id], references: [id])

  @@unique([team_id, user_id])
}
